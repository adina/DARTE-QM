---
title: "Packages and Functions"
author: <a href="https://schuyler-smith.github.io/" target="_blank" >Schuyler D. Smith</a>
date: "`r Sys.Date()`"
output:
  html_document:
    df_print: paged
---
<br>
<br>

## R-Packages {.tabset .tabset-pills}

### CRAN
```{r load_libraries, message=FALSE, warning=FALSE}
library(ggplot2)
library(plotly)
library(ggpubr)
library(Rcpp)
library(vegan)
library(data.table)
```
<br>
<br>

### Github Packages
```{r github_packages, message=FALSE, warning=FALSE, eval=FALSE}
devtools::install_github("teunbrand/ggh4x")
library(ggh4x)
devtools::install_github("joey711/phyloseq")
library(phyloseq)
devtools::install_github("schuyler-smith/schuylR")
library(schuylR)
devtools::install_github("schuyler-smith/ssBLAST")
library(ssBLAST)
devtools::install_github("schuyler-smith/phylosmith")
library(phylosmith)
```
<br>
<br>

## R-Functions {.tabset .tabset-pills}

### Rarefy
```{r rarefy, message=FALSE, warning=FALSE}
rarefy <- function(data, n){
  col_names <- colnames(data)
  rarefied_table <- data.table(categories=data[[1]])
  for(sample in seq(ncol(data)-1)+1){
    rarvec <- vector()
    for(i in seq(length(data[[sample]]))){
      rarvec <- c(rarvec, rep(i, data[[sample]][i]))
    }
    subsample <- sample(rarvec, n, replace=FALSE)
    subsample <- table(subsample)
    subsample <- merge(data.frame(index = seq(length(data[[sample]]))), 
                       data.table(subsample), by = 1, all = TRUE)[,2]
    subsample[is.na(subsample)] <- 0
    rarefied_table <- cbind(rarefied_table, subsample)
  }
  colnames(rarefied_table) <- c(col_names)
  return(rarefied_table)
}
```
<br>
<br>

### Rarefaction
```{r rarefaction, message=FALSE, warning=FALSE}
rarefaction <- function(data, max_n=NA, intervals=10){
  if(is.na(max_n)){max_n <- min(colSums(data[,-1]))}
  n_categories <- vector()
  n <- vector()
  for(i in seq(intervals, max_n, intervals)){
    n <- c(n, i)
    n_categories <- c(n_categories, sum(rowSums(rarefy(data, i)[,-1]) > 0))
  }
  return(data.frame(n=n, counts=n_categories))
}
```
<br>
<br>

### Rarefaction Curve
```{r rarefaction_curve, message=FALSE, warning=FALSE}
rarefaction_curve <- function(data, max_n=NA, intervals=10, iter = 100){
  rarefied_counts <- data.frame()
  for(i in seq(iter)){
    rarefied_counts <- rbind(rarefied_counts, 
                             rarefaction(data, max_n, intervals))}
  g <- ggplot(rarefied_counts, aes_string(x="n", y="counts")) + 
    geom_smooth(formula=y ~ x, method="loess", se=TRUE, fullrange=TRUE, level=0.95, color='black') + 
    theme_bw()
  return(g)
}
```
<br>
<br>

```{r replace_DT_NA, echo=FALSE, message=FALSE, warning=FALSE}
replace_DT_NA=function(DT) {
  for (j in seq_len(ncol(DT)))
    set(DT,which(is.na(DT[[j]])),j,0)
}
```
<br>
<br>

### Sequence Quality
```{r seq_qual, message=FALSE, warning=FALSE}
sequence_quality <- function(file, n = 5e+05){
  if(length(file) == 1 && dir.exists(file)){ 
    file <- gsub('/$','',file)
    files <- vector()
    for(extension in c(".fastq.gz$", ".fastq.bz2$", ".fastq$")){
      files <- append(files, dir(path, extension, full.names = TRUE))
    }
  } else {files <- file}
  files <- normalizePath(files)
  graph_data <- data.table()
  stat_data <- data.table()
  annotations <- data.table()
  for(file in files){
    srqa <- qa(file, n = n)
    df <- srqa[["perCycle"]]$quality
    graph_data <- rbind(graph_data, cbind(df, file = basename(file)))
    rc <- sum(srqa[["readCounts"]]$read)
    
    means <- rowsum(df$Score * df$Count, df$Cycle)/rowsum(df$Count, df$Cycle)
    
    quantile_calc <- function(score, count, q)score[which(cumsum(count)/sum(count) >= q)][[1]]
    stat_data <- rbind(stat_data, 
                    data.table(Cycle = as.integer(rownames(means)), 
                               Mean = as.vector(means), 
                               Q25 = as.vector(by(df, df$Cycle, function(foo) quantile_calc(foo$Score, foo$Count, 0.25), simplify = TRUE)), 
                               Q50 = as.vector(by(df, df$Cycle, function(foo) quantile_calc(foo$Score, foo$Count, 0.5), simplify = TRUE)),
                               Q75 = as.vector(by(df, df$Cycle, function(foo) quantile_calc(foo$Score, foo$Count, 0.75), simplify = TRUE)), 
                               ct = 10 * as.vector(by(df, df$Cycle, function(foo) sum(foo$Count), simplify = TRUE))/min(rc,n), 
                               file = basename(file)))
    if (rc >= n) {rclabel <- paste("Read Count >= ", n)} else rclabel <- paste("Read Count: ", rc)
    annotations <- rbind(annotations, data.table(minScore = min(df$Score), 
                                     label = basename(file), 
                                     rclabel = rclabel, 
                                     rc = rc,
                                     file = basename(file)))
  }
  seq_qual <- list(graph_data = graph_data, stat_data = stat_data, annotations = annotations)
  attributes(seq_qual) <- list(type = "ssSQ")
  return(seq_qual)
}

```

### Plot Sequence Quality
```{r seq_qual_plot, message=FALSE, warning=FALSE}
plot_sequence_quality <- function(file, aggregate = FALSE){
  graph_data <- file[[1]]
  stat_data <- file[[2]]
  annotations <- file[[3]]
  g <- ggplot(data = graph_data, aes(x = Cycle, y = Score)) + 
    geom_tile(aes(fill = Count)) + 
    scale_fill_gradient(low = "#F5F5F5", high = "black") + 
    geom_line(data = stat_data, aes(y = Mean), color = "#66C2A5", size = 2) + 
    geom_line(data = stat_data, aes(y = Q25), color = "#FC8D62", size = 0.25, linetype = "dashed") + 
    geom_line(data = stat_data, aes(y = Q50), color = "#FC8D62", size = 0.25) + 
    geom_line(data = stat_data, aes(y = Q75), color = "#FC8D62", size = 0.25, linetype = "dashed") + 
    geom_text(data = annotations, aes(x = 0, label = rclabel, y = 0), color = "red", hjust = 0, size = 5) + 
    guides(fill = FALSE) + 
    facet_wrap(~file) +   
    theme_bw() + 
    theme(
      axis.line.x = element_line(colour = 'black', size = 1, linetype = 'solid'),
      axis.line.y = element_line(colour = 'black',size = 1, linetype = 'solid'),
      axis.text.x = element_text(size = 10, vjust = 1, hjust = 1),
      axis.title.x = element_text(size = 12, face = "bold"),
      axis.title.y = element_text(size = 12, face = "bold"),
      legend.text = element_text(size = 10),
      legend.title = element_text(size = 12, face = "bold"),
      legend.background = element_rect(fill = (alpha = 0)),
      legend.key.size = unit(4, "mm"),
      legend.spacing.x = unit(0.005, 'npc'),
      strip.text.x = element_text(size = 12, face = 'bold', color = 'black'),
      strip.background = element_rect(colour = 'black', size = 1.4, fill = 'white'),
      panel.grid = element_blank()
    ) + 
    ylab("Quality Score") + 
    xlab("Cycle") + 
    scale_x_continuous(breaks = seq(0,max(graph_data$Cycle),25),
                       expand = expansion(mult = 0.01, 
                                          add = c(0)))
  return(g)
}
```