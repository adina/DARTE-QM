---
title: "Quantification"
author: <a href="https://schuyler-smith.github.io/" target="_blank" >Schuyler D. Smith</a>
date: "`r Sys.Date()`"
output:
  html_document:
    df_print: paged
---
<br>
<br>

```{r setup, message=FALSE, warning=FALSE, echo=FALSE}
spike_counts <- read_counts[ARG == 'spike']
mock_samples <- metadata[grep('Mock', metadata$`Sample Name`),][Analyzed == TRUE]$`Sample Name`
```


```{r spike_counts, echo=FALSE, message=FALSE, warning=FALSE}
graph_data <- melt(spike_counts, id.vars = c('ARG_Family','ARG','Primer'))
graph_data <- graph_data[, floor(mean(value)), by = c('variable')]
graph_data <- graph_data[variable %in% mock_samples]
graph_data[['variable']] <- factor(graph_data[['variable']], levels = mock_samples)
setnames(graph_data, colnames(graph_data), c("Sample", "Spike"))
graph_data <- cbind(graph_data, Spike_Level = as.numeric(gsub('-','.',gsub('Mock-','',gsub('spike-.?','', graph_data$Sample)))))
setkey(graph_data, 'Spike_Level')
graph_data[, Color := schuylR::create_palette(length(unique(graph_data[['Spike_Level']])))[as.factor(graph_data[['Spike_Level']])]]
spike_bars <-  ggplot(graph_data,
                      aes_string(x = 'Sample', y = 'Spike')) + 
  geom_bar(stat = "identity", size = 0.45, alpha = 1, position = "dodge",
           fill = graph_data$Color) + 
  theme_light() +
  theme(
    axis.line.x = element_line(
      colour = 'black',
      size = 1,
      linetype = 'solid'
    ),
    axis.line.y = element_line(
      colour = 'black',
      size = 1,
      linetype = 'solid'
    ),
    axis.text.x = element_text(
      size = 10,
      vjust = 1,
      hjust = 1,
      angle = 30
    ),
    axis.title.x = element_text(size = 12, face = "bold"),
    axis.title.y = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.title = element_text(size = 12, face = "bold"),
    legend.background = element_rect(fill = (alpha = 0)),
    legend.key.size = unit(4, "mm"),
    legend.spacing.x = unit(0.005, 'npc'),
    strip.text.x = element_text(size = 10, face = 'bold', color = 'black'),
    strip.background = element_rect(colour = 'black', size = 1.4, fill = 'white')
  ) +
  scale_y_continuous(expand = expansion(mult = c(0.0025, 0.01))) +
  ylab("Read Count of Spike Sequence") + 
  xlab("")
```

```{r spike_counts_lines, echo=FALSE, message=FALSE, warning=FALSE}
spike_points <-  ggplot(graph_data,
                        aes_string(x = 'Spike_Level', y = 'Spike')) + 
  geom_smooth(formula = y~x, method = "lm", se = FALSE, aes(x = Spike_Level, y = Spike), color = 'black' ) + 
  geom_point(stat = "identity", size = 4, alpha = 1, position = position_dodge(width = 0),
             color = graph_data$Color) + 
  theme_bw() + theme(axis.text.x = element_text(
    hjust = 1, size = 10), axis.text.y = element_text(hjust = 0.95, 
                                                      size = 10), axis.title.x = element_text(size = 12, face = "bold"), 
    axis.title.y = element_text(size = 12, face = "bold"), 
    axis.ticks.x = element_blank(), legend.title = element_text(size = 10, 
                                                                face = "bold"), legend.text = element_text(size = 8), 
    legend.spacing.x = unit(0.005, "npc"), legend.key.size = unit(4, 
                                                                  "mm"), legend.background = element_rect(fill = (alpha = 0)), 
    panel.background = element_rect(color = "black", size = 1.5, 
                                    fill = "white"), panel.spacing = unit(0.015, "npc"), 
    strip.text.x = element_text(size = 10, face = "bold", 
                                color = "black"), strip.background = element_rect(colour = "black", 
                                                                                  size = 1.4, fill = "white")) + 
  labs(x = "Spike Level", y = "Spike Sequences Detected at >= 98% Identity")
```


## Synthetic Oligonucleotide 'Spike'  {.tabset .tabset-pills}
### Linear Regression
```{r spike_counts_line_reg, fig.width=6, fig.height=6, echo=FALSE, warning=FALSE}
spike_points
```
<br>
<br>

### Bar Chart
```{r spike_counts_bars, fig.width=6, fig.height=4, echo=FALSE, warning=FALSE}
spike_bars
```
<br>
<br>

### Table
```{r spike_counts_table, echo=FALSE, warning=FALSE}
datatable(graph_data[,-c('Color')])
```
<br>
<br>
